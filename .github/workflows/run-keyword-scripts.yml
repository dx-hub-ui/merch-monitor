name: Run keyword maintenance scripts

on:
  workflow_dispatch:
    inputs:
      scripts:
        description: 'Comma or newline-separated npm scripts to run in order (e.g. keywords:serp, metrics)'
        required: false
        default: 'keywords:serp'
      node-version:
        description: 'Node.js version to use'
        required: false
        default: '20'
  schedule:
    - cron: '0 6 * * *'

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.node-version || '20' }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Resolve scripts input
        id: scripts
        run: |
          set -euo pipefail
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && -n "${{ github.event.inputs.scripts }}" ]]; then
            raw='${{ github.event.inputs.scripts }}'
          else
            raw='keywords:serp'
          fi

          cleaned=$(printf '%s\n' "$raw" | tr ',;' '\n' | tr -d '\r')
          list=""
          while IFS= read -r line; do
            trimmed=$(echo "$line" | xargs)
            if [[ -n "$trimmed" ]]; then
              list+="$trimmed"$'\n'
            fi
          done <<< "$cleaned"

          if [[ -z "$list" ]]; then
            echo "::error::No npm scripts were supplied" >&2
            exit 1
          fi

          printf 'list<<EOF\n%sEOF\n' "$list" >> "$GITHUB_OUTPUT"
          printf 'json=%s\n' "$(printf '%s' "$list" | jq -Rsc 'split("\n") | map(select(length > 0))')" >> "$GITHUB_OUTPUT"

      - name: Install Playwright browsers
        if: contains(steps.scripts.outputs.json, 'keywords:serp')
        run: npx playwright install --with-deps

      - name: Run npm scripts sequentially
        env:
          SCRIPT_LIST: ${{ steps.scripts.outputs.list }}
        run: |
          set -euo pipefail
          while IFS= read -r script; do
            [[ -z "$script" ]] && continue
            echo "::group::npm run $script"
            npm run "$script"
            echo "::endgroup::"
          done <<< "$SCRIPT_LIST"
